import 'dart:convert';
import 'dart:io';

import 'package:flutter/foundation.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:http/http.dart' as http;
import 'package:package_info_plus/package_info_plus.dart';
import 'package:wildr_flutter/forked_packages/isolate_bloc_lib/isolate_bloc.dart';
import 'package:wildr_flutter/gql_isolate_bloc/gql_isolate_bloc.dart';
import 'package:wildr_flutter/main_common.dart';

class TestHelpers {
  // Initializes the isolate bloc by registering it.
  static void initGqlIsolateBloc(
    List<String> requestFileNames,
    Map<String, String> requestResponseFiles,
    String testRoot,
  ) {
    registerIsolateBloc<GraphqlIsolateBloc, GqlIsolateState>(
      create: () => GraphqlIsolateBloc(
        serverUrl: 'http://localhost:4000/graphql',
        env: Environment.LOCAL,
        selectedFeedScopeTypeStr: 'GLOBAL',
        packageInfo: PackageInfo(
          appName: '',
          packageName: '',
          version: '',
          buildNumber: '',
        ),
        client: FakeWildrHttpClientProvider(
          requestFileNames,
          requestResponseFiles,
          testRoot,
        ),
      ),
    );
  }
}

class FakeWildrHttpClientProvider extends Fake implements http.Client {
  final List<String> requestFileNames;
  final Map<String, String> requestResponseFiles;
  final String testRoot;

  FakeWildrHttpClientProvider(
    this.requestFileNames,
    this.requestResponseFiles,
    this.testRoot,
  );

  bool verboseLogging = false;

  // Updates the request files generated by the code.
  bool updateRequestGoldens = false;
  var requestNumber = 0;

  @override
  Future<http.StreamedResponse> send(http.BaseRequest request) async {
    if (request is! http.Request) {
      throw Exception('Invalid request type. Expected http.Request');
    }
    if (verboseLogging) {
      debugPrint(request.toString());
      debugPrint(request.headers.toString());
      debugPrint(request.body.replaceAll(r'\n', '\n'));
    }

    final expectedRequestFileName = requestFileNames[requestNumber];

    final requestFile = File(
      'test/lib/gql_isolate_bloc/$testRoot/$expectedRequestFileName.json',
    );

    if (updateRequestGoldens) {
      requestFile.writeAsStringSync(request.body);
    } else {
      assert(request.body == requestFile.readAsStringSync());
    }

    final fileName = requestResponseFiles[requestFileNames[requestNumber++]];
    if (fileName == null) {
      debugPrint('''
        Could not find file for request ${requestNumber - 1}
        file name: ${requestFileNames[requestNumber - 1]}
      ''');
    }
    final file = File('test/lib/gql_isolate_bloc/$testRoot/$fileName.json')
        .readAsStringSync();

    final fakeResponseBody =
        Stream<List<int>>.fromIterable([utf8.encode(file)]);
    final fakeResponse = http.StreamedResponse(fakeResponseBody, 200);
    return fakeResponse;
  }
}
