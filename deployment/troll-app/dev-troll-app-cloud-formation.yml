
Metadata:
  Description: "CloudFormation Template for Troll App"
Parameters:
  VPCId:
    Type: String
    Default: "vpc-0678a158e6107b133"
  IAMManagedPolicyPublishCloudWatchLogsArn:
    Type: String
    Default: "arn:aws:iam::793433463428:policy/PublishCloudWatchLogs"
  ServiceDiscoveryPrivateDnsNamespace:
    Type: String
    Default: "ns-3mtqv6dgd2th737y"
  EC2SubnetUSW2APub:
    Type: String
    Default: "subnet-0c83de04ec899adee"
  EC2SubnetUSW2BPub:
    Type: String
    Default: "subnet-0d558262750ebc662"
  EC2SubnetUSW2CPub:
    Type: String
    Default: "subnet-0eca468d2c8889c66"
  EC2SubnetUSW2APri:
    Type: String
    Default: "subnet-07238407022fef197"
  EC2SubnetUSW2BPri:
    Type: String
    Default: "subnet-080bc4c570be2be74"
  EC2SubnetUSW2CPri:
    Type: String
    Default: "subnet-0bdaa02614d164c8a"
  ECSClusterName:
    Type: String
    Default: "wildr-dev-2"
  ECSClusterArn:
    Type: String
    Default: "arn:aws:ecs:us-west-2:793433463428:cluster/wildr-dev-2"
  WildrEnvName:
    Type: String
    Default: "wildr-dev-2"
  TrollAppLoadBalancerCertArn:
    Type: String
    Default: "arn:aws:acm:us-west-2:793433463428:certificate/89fb000f-c59e-4681-ad66-d1cad1e62e45"
  Route53HostedZoneId:
    Type: String
    Default: "Z08857871GX2FB5P886EZ" # wildr.com

Resources:

  EC2SGTrollAppLB:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Load Balancer SG for Troll App"
      GroupName: !Sub "secgrp-${WildrEnvName}-lb-troll-app"
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          FromPort: 80
          IpProtocol: "tcp"
          ToPort: 80
        - CidrIp: "0.0.0.0/0"
          FromPort: 443
          IpProtocol: "tcp"
          ToPort: 443
  EC2SGTrollAppLBEgress1:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref EC2SGTrollAppLB
      DestinationSecurityGroupId: !Ref EC2SGTrollApp
      FromPort: 80
      IpProtocol: "tcp"
      ToPort: 80

  EC2SGTrollAppLBEgress2:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref EC2SGTrollAppLB
      DestinationSecurityGroupId: !Ref EC2SGTrollApp
      FromPort: 80
      IpProtocol: "tcp"
      ToPort: 3000


  EC2SGTrollApp:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Security Group for troll web app"
      GroupName: !Sub "secgrp-${WildrEnvName}-troll-app"
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          FromPort: 3000
          IpProtocol: "tcp"
          ToPort: 3000
        - CidrIp: "0.0.0.0/0"
          FromPort: 80
          IpProtocol: "tcp"
          ToPort: 80
        - CidrIp: "0.0.0.0/0"
          FromPort: 443
          IpProtocol: "tcp"
          ToPort: 443
      SecurityGroupEgress:
        - CidrIp: "0.0.0.0/0"
          FromPort: 0
          IpProtocol: "tcp"
          ToPort: 65535
        - CidrIp: "0.0.0.0/0"
          FromPort: 123
          IpProtocol: "udp"
          ToPort: 123
        - CidrIp: "0.0.0.0/0"
          IpProtocol: "-1"


  IAMTrollAppECSTaskRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "sts:AssumeRole"
            Principal:
              Service: "ecs-tasks.amazonaws.com"
      Path: "/"
      RoleName: !Sub "${WildrEnvName}-troll-app-ecs-task-role"
      ManagedPolicyArns:
        - !Ref IAMManagedPolicyPublishCloudWatchLogsArn

  IAMTrollAppECSTaskExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "sts:AssumeRole"
            Principal:
              Service: "ecs-tasks.amazonaws.com"
      Path: "/"
      RoleName: !Sub "${WildrEnvName}-troll-app-ecs-task-execution-role"
      ManagedPolicyArns:
        - !Ref IAMManagedPolicyPublishCloudWatchLogsArn
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
        - "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole"
        - "arn:aws:iam::793433463428:policy/SystemsManagerAdminAccess"
        - "arn:aws:iam::793433463428:policy/SecretsAdminAccess"

  ELBTrollApp:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: !Sub "lb-${WildrEnvName}-troll-app"
      Scheme: "internet-facing"
      Type: "application"
      Subnets:
        - !Ref EC2SubnetUSW2APub
        - !Ref EC2SubnetUSW2CPub
        - !Ref EC2SubnetUSW2BPub
      SecurityGroups:
        - !Ref EC2SGTrollAppLB
      IpAddressType: "ipv4"
      LoadBalancerAttributes:
        - Key: "access_logs.s3.enabled"
          Value: "false"
        - Key: "idle_timeout.timeout_seconds"
          Value: "60"
        - Key: "deletion_protection.enabled"
          Value: "false"
        - Key: "routing.http2.enabled"
          Value: "true"
        - Key: "routing.http.drop_invalid_header_fields.enabled"
          Value: "false"
        - Key: "routing.http.xff_client_port.enabled"
          Value: "false"
        - Key: "routing.http.desync_mitigation_mode"
          Value: "defensive"
        - Key: "waf.fail_open.enabled"
          Value: "false"
        - Key: "routing.http.x_amzn_tls_version_and_cipher_suite.enabled"
          Value: "false"

  ELBListenerTrollAppPort443:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref ELBTrollApp
      Port: 443
      Protocol: "HTTPS"
      SslPolicy: "ELBSecurityPolicy-2016-08"
      Certificates:
        - CertificateArn: !Ref TrollAppLoadBalancerCertArn
      DefaultActions:
        - Type: "forward"
          TargetGroupArn: !Ref ELBTargetGroupTrollApp

  ELBListenerTrollAppPort80:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      LoadBalancerArn: !Ref ELBTrollApp
      Port: 80
      Protocol: "HTTP"
      DefaultActions:
        - Order: 1
          RedirectConfig:
            Protocol: "HTTPS"
            Port: "443"
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"
          Type: "redirect"
  ELBTargetGroupTrollApp:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      Port: 80
      Protocol: "HTTP"
      VpcId: !Ref VPCId
      TargetType: "ip"

  Route53RecordSet:
    Type: "AWS::Route53::RecordSet"
    Properties:
      Name: "detox.wildr.com."
      Type: "A"
      HostedZoneId: !Ref Route53HostedZoneId
      AliasTarget:
        HostedZoneId: !GetAtt ELBTrollApp.CanonicalHostedZoneID
        DNSName: !GetAtt ELBTrollApp.DNSName
        EvaluateTargetHealth: false

  ServiceDiscoveryTrollAppService:
    Type: "AWS::ServiceDiscovery::Service"
    Properties:
      Name: "troll-app"
      NamespaceId: !Ref ServiceDiscoveryPrivateDnsNamespace
      DnsConfig:
        DnsRecords:
          - Type: "A"
            TTL: 30
        RoutingPolicy: "MULTIVALUE"
      HealthCheckCustomConfig:
        FailureThreshold: 1

  TrollAppECSLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Sub "/${WildrEnvName}/troll-app"
      RetentionInDays: 7

  TrollAppECSTaskDef:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      ContainerDefinitions:
        - Name: "troll-app"
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/troll-app:latest"
          Essential: true
          Environment:
            - Name: "FIREBASE_AUTH_DOMAIN"
              Value: "wildr-prod-troll-app.firebaseapp.com"
            - Name: "FIREBASE_PROJECT_ID"
              Value: "wildr-prod-troll-app"
            - Name: "FIREBASE_STORAGE_BUCKET"
              Value: "wildr-prod-troll-app.appspot.com"
            - Name: "FIREBASEMESSAGING_SENDER_ID"
              Value: "464001211089"
            - Name: "FIREBASE_APP_ID"
              Value: "1:464001211089:web:7ca9ec5e2e1542a02e03f0"
            - Name: "FIREBASE_MEASUREMENT_ID"
              Value: "G-0VNLZK7WXE"
            - Name: "NEXT_PUBLIC_ENABLE_TOP_TOXIC_USERS"
              Value: "true"
            - Name: "NEXTAUTH_URL"
              Value: "https://detox.wildr.com"
            - Name: "TROLL_SERVER_URL"
              Value: "wildr-dev-2.troll-server-sxsw.int.wildr.com"
          Secrets:
            - Name: "FIREBASE_API_KEY"
              ValueFrom: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:wildr-dev-1/secrets-95oWXN:TROLL_APP_FIREBASE_API_KEY::"
            - Name: "NEXTAUTH_SECRET"
              ValueFrom: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:wildr-dev-1/secrets-95oWXN:NEXTAUTH_SECRET::"
            - Name: "TWITTER_CLIENT_SECRET"
              ValueFrom: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:wildr-dev-1/secrets-95oWXN:TWITTER_CLIENT_SECRET::"
            - Name: "TWITTER_CLIENT_ID"
              ValueFrom: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:wildr-dev-1/secrets-95oWXN:TWITTER_CLIENT_ID::"
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group: !Ref TrollAppECSLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: "troll-app"
          PortMappings:
            - ContainerPort: 3000
              HostPort: 3000
              Protocol: "tcp"
        - Name: datadog-agent
          Image: 'public.ecr.aws/datadog/agent:latest'
          PortMappings:
            - ContainerPort: 8126
              HostPort: 8126
              Protocol: "tcp"
          Environment:
            - Name: DD_SITE
              Value: "datadoghq.com"
            - Name: DD_APM_ENABLED
              Value: true
            - Name: ECS_FARGATE
              Value: true
          Secrets:
            - Name: "DD_API_KEY"
              ValueFrom: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:wildr-dev-1/secrets-95oWXN:DD_API_KEY::"
      Family: !Sub "troll-app"
      TaskRoleArn: !GetAtt IAMTrollAppECSTaskRole.Arn
      ExecutionRoleArn: !GetAtt IAMTrollAppECSTaskExecutionRole.Arn
      NetworkMode: "awsvpc"
      RequiresCompatibilities:
        - "FARGATE"
      Cpu: "0.25 vCPU"
      Memory: "512"
      RuntimePlatform:
        CpuArchitecture: "ARM64"
        OperatingSystemFamily: "LINUX"

  TrollAppECSService:
    Type: "AWS::ECS::Service"
    Properties:
      ServiceName: "troll-app"
      Cluster: !Ref ECSClusterArn
      ServiceRegistries:
        - RegistryArn: !GetAtt ServiceDiscoveryTrollAppService.Arn
      DesiredCount: 2
      LaunchType: "FARGATE"
      PlatformVersion: "LATEST"
      TaskDefinition: !Ref TrollAppECSTaskDef
      HealthCheckGracePeriodSeconds: 60
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
        DeploymentCircuitBreaker:
          Enable: false
          Rollback: false
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref EC2SGTrollApp
          Subnets:
            - !Ref EC2SubnetUSW2APri
            - !Ref EC2SubnetUSW2BPri
            - !Ref EC2SubnetUSW2CPri
      SchedulingStrategy: "REPLICA"
      LoadBalancers:
        - TargetGroupArn: !Ref ELBTargetGroupTrollApp
          ContainerName: "troll-app"
          ContainerPort: 3000

  TrollAppAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${WildrEnvName}-auto-scaling-role-troll-app"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [application-autoscaling.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Policies:
        - PolicyName: service-auto-scaling-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecs:DescribeServices
                  - ecs:UpdateService
                  - cloudwatch:PutMetricAlarm
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:DeleteAlarms
                Resource:
                  - "*"

  TrollAppECSServiceScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      RoleARN: !GetAtt TrollAppAutoScalingRole.Arn
      ResourceId: !Join ["/", [service, !Ref ECSClusterName, !GetAtt [TrollAppECSService, Name]]]
      ServiceNamespace: ecs
      ScalableDimension: ecs:service:DesiredCount
      MinCapacity: 2
      MaxCapacity: 10

  TrollAppECSServiceScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub "${WildrEnvName}-cpu75-scaling-policy-troll-app"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref TrollAppECSServiceScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 75.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization

  TrollAppECSServiceCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "CPU Alarm to scale up Troll App"
      AlarmActions:
        - !Ref TrollAppECSServiceScalingPolicy
      OKActions:
        - !Ref TrollAppECSServiceScalingPolicy
      MetricName: "CPUUtilization"
      Namespace: "AWS/ECS"
      Statistic: "Average"
      Period: '60'
      EvaluationPeriods: '2'
      Threshold: '75'
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: WildrEnvName
          Value: !Ref WildrEnvName
        - Name: ECSTaskName
          Value: !GetAtt TrollAppECSService.Name
