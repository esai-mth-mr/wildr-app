//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/postgres"
)

var SchemaMigrations = newSchemaMigrationsTable()

type schemaMigrationsTable struct {
	postgres.Table

	//Columns
	Version postgres.ColumnInteger
	Dirty   postgres.ColumnBool

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SchemaMigrationsTable struct {
	schemaMigrationsTable

	EXCLUDED schemaMigrationsTable
}

// AS creates new SchemaMigrationsTable with assigned alias
func (a *SchemaMigrationsTable) AS(alias string) *SchemaMigrationsTable {
	aliasTable := newSchemaMigrationsTable()
	aliasTable.Table.AS(alias)
	return aliasTable
}

func newSchemaMigrationsTable() *SchemaMigrationsTable {
	return &SchemaMigrationsTable{
		schemaMigrationsTable: newSchemaMigrationsTableImpl("public", "schema_migrations"),
		EXCLUDED:              newSchemaMigrationsTableImpl("", "excluded"),
	}
}

func newSchemaMigrationsTableImpl(schemaName, tableName string) schemaMigrationsTable {
	var (
		VersionColumn  = postgres.IntegerColumn("version")
		DirtyColumn    = postgres.BoolColumn("dirty")
		allColumns     = postgres.ColumnList{VersionColumn, DirtyColumn}
		mutableColumns = postgres.ColumnList{DirtyColumn}
	)

	return schemaMigrationsTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		Version: VersionColumn,
		Dirty:   DirtyColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
