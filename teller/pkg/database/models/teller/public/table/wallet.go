//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/postgres"
)

var Wallet = newWalletTable()

type walletTable struct {
	postgres.Table

	//Columns
	ID             postgres.ColumnString
	OwnerID        postgres.ColumnString
	Balances       postgres.ColumnString
	Page           postgres.ColumnString
	FirstEntryDate postgres.ColumnTimestampz
	LastEntryDate  postgres.ColumnTimestampz
	Metadata       postgres.ColumnString
	Type           postgres.ColumnInteger
	Status         postgres.ColumnInteger
	CreatedAt      postgres.ColumnTimestampz
	UpdatedAt      postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type WalletTable struct {
	walletTable

	EXCLUDED walletTable
}

// AS creates new WalletTable with assigned alias
func (a *WalletTable) AS(alias string) *WalletTable {
	aliasTable := newWalletTable()
	aliasTable.Table.AS(alias)
	return aliasTable
}

func newWalletTable() *WalletTable {
	return &WalletTable{
		walletTable: newWalletTableImpl("public", "wallet"),
		EXCLUDED:    newWalletTableImpl("", "excluded"),
	}
}

func newWalletTableImpl(schemaName, tableName string) walletTable {
	var (
		IDColumn             = postgres.StringColumn("id")
		OwnerIDColumn        = postgres.StringColumn("owner_id")
		BalancesColumn       = postgres.StringColumn("balances")
		PageColumn           = postgres.StringColumn("page")
		FirstEntryDateColumn = postgres.TimestampzColumn("first_entry_date")
		LastEntryDateColumn  = postgres.TimestampzColumn("last_entry_date")
		MetadataColumn       = postgres.StringColumn("metadata")
		TypeColumn           = postgres.IntegerColumn("type")
		StatusColumn         = postgres.IntegerColumn("status")
		CreatedAtColumn      = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn      = postgres.TimestampzColumn("updated_at")
		allColumns           = postgres.ColumnList{IDColumn, OwnerIDColumn, BalancesColumn, PageColumn, FirstEntryDateColumn, LastEntryDateColumn, MetadataColumn, TypeColumn, StatusColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns       = postgres.ColumnList{OwnerIDColumn, BalancesColumn, PageColumn, FirstEntryDateColumn, LastEntryDateColumn, MetadataColumn, TypeColumn, StatusColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return walletTable{
		Table: postgres.NewTable(schemaName, tableName, allColumns...),

		//Columns
		ID:             IDColumn,
		OwnerID:        OwnerIDColumn,
		Balances:       BalancesColumn,
		Page:           PageColumn,
		FirstEntryDate: FirstEntryDateColumn,
		LastEntryDate:  LastEntryDateColumn,
		Metadata:       MetadataColumn,
		Type:           TypeColumn,
		Status:         StatusColumn,
		CreatedAt:      CreatedAtColumn,
		UpdatedAt:      UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
