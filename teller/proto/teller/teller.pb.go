// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.26.0
// source: teller/proto/teller/teller.proto

package teller

import (
	context "context"
	wallet "github.com/wildr-inc/app/teller/proto/wallet"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RetrieveWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *RetrieveWalletRequest) Reset() {
	*x = RetrieveWalletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teller_proto_teller_teller_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveWalletRequest) ProtoMessage() {}

func (x *RetrieveWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teller_proto_teller_teller_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveWalletRequest.ProtoReflect.Descriptor instead.
func (*RetrieveWalletRequest) Descriptor() ([]byte, []int) {
	return file_teller_proto_teller_teller_proto_rawDescGZIP(), []int{0}
}

func (x *RetrieveWalletRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type RetrieveWalletResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wallet *wallet.Wallet `protobuf:"bytes,1,opt,name=wallet,proto3" json:"wallet,omitempty"`
}

func (x *RetrieveWalletResponse) Reset() {
	*x = RetrieveWalletResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teller_proto_teller_teller_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveWalletResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveWalletResponse) ProtoMessage() {}

func (x *RetrieveWalletResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teller_proto_teller_teller_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveWalletResponse.ProtoReflect.Descriptor instead.
func (*RetrieveWalletResponse) Descriptor() ([]byte, []int) {
	return file_teller_proto_teller_teller_proto_rawDescGZIP(), []int{1}
}

func (x *RetrieveWalletResponse) GetWallet() *wallet.Wallet {
	if x != nil {
		return x.Wallet
	}
	return nil
}

type GetExchangeRateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Currency string `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *GetExchangeRateRequest) Reset() {
	*x = GetExchangeRateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teller_proto_teller_teller_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExchangeRateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExchangeRateRequest) ProtoMessage() {}

func (x *GetExchangeRateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_teller_proto_teller_teller_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExchangeRateRequest.ProtoReflect.Descriptor instead.
func (*GetExchangeRateRequest) Descriptor() ([]byte, []int) {
	return file_teller_proto_teller_teller_proto_rawDescGZIP(), []int{2}
}

func (x *GetExchangeRateRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

type GetExchangeRateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeRate float64 `protobuf:"fixed64,1,opt,name=exchangeRate,proto3" json:"exchangeRate,omitempty"`
}

func (x *GetExchangeRateResponse) Reset() {
	*x = GetExchangeRateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_teller_proto_teller_teller_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExchangeRateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExchangeRateResponse) ProtoMessage() {}

func (x *GetExchangeRateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_teller_proto_teller_teller_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExchangeRateResponse.ProtoReflect.Descriptor instead.
func (*GetExchangeRateResponse) Descriptor() ([]byte, []int) {
	return file_teller_proto_teller_teller_proto_rawDescGZIP(), []int{3}
}

func (x *GetExchangeRateResponse) GetExchangeRate() float64 {
	if x != nil {
		return x.ExchangeRate
	}
	return 0
}

var File_teller_proto_teller_teller_proto protoreflect.FileDescriptor

var file_teller_proto_teller_teller_proto_rawDesc = []byte{
	0x0a, 0x20, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x06, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x1a, 0x20, 0x74, 0x65, 0x6c, 0x6c,
	0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2f, 0x0a, 0x15,
	0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x40, 0x0a,
	0x16, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x06, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x22,
	0x34, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x3d, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x32, 0xad, 0x01, 0x0a, 0x06, 0x54, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x12,
	0x4f, 0x0a, 0x0e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x12, 0x1d, 0x2e, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x52, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x77, 0x69, 0x6c, 0x64, 0x72, 0x2d, 0x69, 0x6e, 0x63, 0x2f, 0x61, 0x70, 0x70,
	0x2f, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x65,
	0x6c, 0x6c, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_teller_proto_teller_teller_proto_rawDescOnce sync.Once
	file_teller_proto_teller_teller_proto_rawDescData = file_teller_proto_teller_teller_proto_rawDesc
)

func file_teller_proto_teller_teller_proto_rawDescGZIP() []byte {
	file_teller_proto_teller_teller_proto_rawDescOnce.Do(func() {
		file_teller_proto_teller_teller_proto_rawDescData = protoimpl.X.CompressGZIP(file_teller_proto_teller_teller_proto_rawDescData)
	})
	return file_teller_proto_teller_teller_proto_rawDescData
}

var file_teller_proto_teller_teller_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_teller_proto_teller_teller_proto_goTypes = []interface{}{
	(*RetrieveWalletRequest)(nil),   // 0: teller.RetrieveWalletRequest
	(*RetrieveWalletResponse)(nil),  // 1: teller.RetrieveWalletResponse
	(*GetExchangeRateRequest)(nil),  // 2: teller.GetExchangeRateRequest
	(*GetExchangeRateResponse)(nil), // 3: teller.GetExchangeRateResponse
	(*wallet.Wallet)(nil),           // 4: wallet.Wallet
}
var file_teller_proto_teller_teller_proto_depIdxs = []int32{
	4, // 0: teller.RetrieveWalletResponse.wallet:type_name -> wallet.Wallet
	0, // 1: teller.Teller.RetrieveWallet:input_type -> teller.RetrieveWalletRequest
	2, // 2: teller.Teller.GetExchangeRate:input_type -> teller.GetExchangeRateRequest
	1, // 3: teller.Teller.RetrieveWallet:output_type -> teller.RetrieveWalletResponse
	3, // 4: teller.Teller.GetExchangeRate:output_type -> teller.GetExchangeRateResponse
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_teller_proto_teller_teller_proto_init() }
func file_teller_proto_teller_teller_proto_init() {
	if File_teller_proto_teller_teller_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_teller_proto_teller_teller_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveWalletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teller_proto_teller_teller_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveWalletResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teller_proto_teller_teller_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExchangeRateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_teller_proto_teller_teller_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExchangeRateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_teller_proto_teller_teller_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_teller_proto_teller_teller_proto_goTypes,
		DependencyIndexes: file_teller_proto_teller_teller_proto_depIdxs,
		MessageInfos:      file_teller_proto_teller_teller_proto_msgTypes,
	}.Build()
	File_teller_proto_teller_teller_proto = out.File
	file_teller_proto_teller_teller_proto_rawDesc = nil
	file_teller_proto_teller_teller_proto_goTypes = nil
	file_teller_proto_teller_teller_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TellerClient is the client API for Teller service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TellerClient interface {
	RetrieveWallet(ctx context.Context, in *RetrieveWalletRequest, opts ...grpc.CallOption) (*RetrieveWalletResponse, error)
	GetExchangeRate(ctx context.Context, in *GetExchangeRateRequest, opts ...grpc.CallOption) (*GetExchangeRateResponse, error)
}

type tellerClient struct {
	cc grpc.ClientConnInterface
}

func NewTellerClient(cc grpc.ClientConnInterface) TellerClient {
	return &tellerClient{cc}
}

func (c *tellerClient) RetrieveWallet(ctx context.Context, in *RetrieveWalletRequest, opts ...grpc.CallOption) (*RetrieveWalletResponse, error) {
	out := new(RetrieveWalletResponse)
	err := c.cc.Invoke(ctx, "/teller.Teller/RetrieveWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tellerClient) GetExchangeRate(ctx context.Context, in *GetExchangeRateRequest, opts ...grpc.CallOption) (*GetExchangeRateResponse, error) {
	out := new(GetExchangeRateResponse)
	err := c.cc.Invoke(ctx, "/teller.Teller/GetExchangeRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TellerServer is the server API for Teller service.
type TellerServer interface {
	RetrieveWallet(context.Context, *RetrieveWalletRequest) (*RetrieveWalletResponse, error)
	GetExchangeRate(context.Context, *GetExchangeRateRequest) (*GetExchangeRateResponse, error)
}

// UnimplementedTellerServer can be embedded to have forward compatible implementations.
type UnimplementedTellerServer struct {
}

func (*UnimplementedTellerServer) RetrieveWallet(context.Context, *RetrieveWalletRequest) (*RetrieveWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveWallet not implemented")
}
func (*UnimplementedTellerServer) GetExchangeRate(context.Context, *GetExchangeRateRequest) (*GetExchangeRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExchangeRate not implemented")
}

func RegisterTellerServer(s *grpc.Server, srv TellerServer) {
	s.RegisterService(&_Teller_serviceDesc, srv)
}

func _Teller_RetrieveWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerServer).RetrieveWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teller.Teller/RetrieveWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerServer).RetrieveWallet(ctx, req.(*RetrieveWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Teller_GetExchangeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExchangeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TellerServer).GetExchangeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/teller.Teller/GetExchangeRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TellerServer).GetExchangeRate(ctx, req.(*GetExchangeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Teller_serviceDesc = grpc.ServiceDesc{
	ServiceName: "teller.Teller",
	HandlerType: (*TellerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RetrieveWallet",
			Handler:    _Teller_RetrieveWallet_Handler,
		},
		{
			MethodName: "GetExchangeRate",
			Handler:    _Teller_GetExchangeRate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "teller/proto/teller/teller.proto",
}
